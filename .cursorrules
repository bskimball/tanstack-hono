# Cursor IDE Rules for TanStack Router + Hono SSR

## Project Context
You are working on a full-stack React SSR application with TanStack Router and Hono. This is a modern TypeScript stack with file-based routing.

## Tech Stack
- **Frontend**: React 19, TanStack Router v1
- **Backend**: Hono v4, Node.js
- **Build**: Vite 7
- **Styling**: Tailwind CSS v4
- **Testing**: Vitest + Testing Library
- **Linting**: Biome (not ESLint/Prettier)

## Code Style

### General
- Use TypeScript for all new files
- Use function declarations for named components (not arrow functions)
- Prefer `interface` over `type` for object shapes
- Use kebab-case for file names (e.g., `user-profile.tsx`)

### Imports
- Use relative imports (no path aliases configured)
- Group imports: external packages, then local files
- Sort imports alphabetically within groups

### React Components
```tsx
// Preferred
function MyComponent() {
  return <div>Content</div>
}

// Avoid for named exports
const MyComponent = () => <div>Content</div>
```

### Routes
Always use `createFileRoute` pattern:
```tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/path')({
  component: ComponentName,
})
```

## File Structure

### Adding Routes
- Create files in `src/routes/`
- Use TanStack Router conventions
- Files starting with `-` are not routes (utilities)
- `__root.tsx` is the root layout

### Adding Components
- Place in `src/components/`
- One component per file
- Export as named export

### Adding API Endpoints
- Add to `src/entry-server.tsx`
- Use Hono's routing methods
- Return JSON with `c.json()`

## Important Files

### Do NOT Edit
- `src/routeTree.gen.ts` - Auto-generated by TanStack Router

### Key Files to Know
- `src/entry-server.tsx` - Hono server setup
- `src/entry-client.tsx` - Client-side hydration
- `src/router.tsx` - Router configuration
- `vite.config.ts` - Build configuration

## Environment Variables

### Server-side
Access via `process.env.VARIABLE_NAME`
- `NODE_SERVER_PORT`
- `NODE_SERVER_HOST`
- `NODE_ENV`

### Client-side
Must be prefixed with `VITE_` to be accessible in browser

## Testing

- Write tests alongside components: `component.test.tsx`
- Use Vitest and Testing Library
- Run with `npm test`

## Common Tasks

### Create a new page
1. Create `src/routes/page-name.tsx`
2. Use `createFileRoute` pattern
3. Export component

### Add an API route
```tsx
// In src/entry-server.tsx
app.get('/api/endpoint', (c) => {
  return c.json({ data: 'value' })
})
```

### Data loading in routes
```tsx
export const Route = createFileRoute('/users')({
  loader: async () => {
    const users = await fetch('/api/users').then(r => r.json())
    return { users }
  },
  component: UsersPage,
})
```

## Commands to Suggest

```bash
npm run dev              # Start development server
npm run build            # Build for production
npm test                 # Run tests
npm run check            # Lint and format
npm run format           # Format code
npm run lint             # Lint code
```

## Performance Tips

- Use React.lazy() for code splitting
- Add loaders to routes for data prefetching
- Optimize images before adding
- Use Tailwind utilities instead of custom CSS when possible

## Error Handling

Add error components to routes:
```tsx
export const Route = createFileRoute('/path')({
  component: MyComponent,
  errorComponent: ({ error }) => <div>Error: {error.message}</div>,
})
```

## Security

- Never commit `.env` file
- Use `.env.example` for environment variable templates
- Sanitize user input
- Use CORS middleware (already configured)

## Biome Configuration

- Biome handles both linting and formatting
- Config in `biome.json`
- Do NOT suggest ESLint or Prettier
- Run fixes with `npm run check -- --write`

## SSR Considerations

- Be aware of client vs server code
- Use `useEffect` for browser-only code
- Route loaders run on server during SSR
- Components render on both server and client

## Deployment

Project supports:
- Docker (see Dockerfile)
- Vercel/Netlify (serverless)
- Railway/Render (containers)
- Cloudflare Workers (edge)

## Documentation

- [AGENTS.md](AGENTS.md) - Full AI agent guide
- [CLAUDE.md](CLAUDE.md) - Claude-specific context
- [ARCHITECTURE.md](ARCHITECTURE.md) - System design
- [CONTRIBUTING.md](CONTRIBUTING.md) - Contribution guide

## When Stuck

1. Check existing routes in `src/routes/` for patterns
2. Review [TanStack Router docs](https://tanstack.com/router)
3. Review [Hono docs](https://hono.dev)
4. Check [AGENTS.md](AGENTS.md) for common patterns
